---
name: cura-installer

on:
    workflow_dispatch:
        inputs:
            conan_config:
                description: 'Conan config branch to use'
                default: 'CURA-9177_Fix_CI_CD'
                required: true
            enterprise:
                description: 'Build Cura as an Enterprise edition'
                required: true
                default: false
                type: boolean
            staging:
                description: 'Use staging API'
                required: true
                default: false
                type: boolean
            installer:
                description: 'Create the installer'
                required: true
                default: false
                type: boolean

env:
    CONAN_USER: ${{ secrets.CONAN_USER }}
    CONAN_PASS: ${{ secrets.CONAN_PASS }}
    GIT_USERNAME: ${{ secrets.GIT_USERNAME }}
    GIT_PASSWORD: ${{ secrets.GIT_PASSWORD }}
    CODESIGN_IDENTITY: ${{ secrets.CODESIGN_IDENTITY }}
    NOTARIZE_USER: ${{ secrets.NOTARIZE_USER }}
    NOTARIZE_PASSWORD: ${{ secrets.NOTARIZE_PASSWORD }}

jobs:
    get-semver:

        runs-on: ubuntu-20.04

        outputs:
            semver_full: ${{ steps.git-tool.outputs.Major }}.${{ steps.git-tool.outputs.Minor }}.${{ steps.git-tool.outputs.Patch }}-${{ steps.prereleasetag.outputs.PreReleaseTag }}+${{ steps.date.outputs.BuildMetaData }}
            semver_major: ${{ steps.git-tool.outputs.Major }}
            semver_minor: ${{ steps.git-tool.outputs.Minor }}
            semver_patch: ${{ steps.git-tool.outputs.Patch }}
            semver_prereleasetag: ${{ steps.prereleasetag.outputs.PreReleaseTag }}
            semver_build: ${{ steps.date.outputs.BuildMetaData }}

        steps:
        -   name: Checkout Arcus
            uses: actions/checkout@v3
            with:
                ref: ${{ github.head_ref }}
                fetch-depth: 0

        -   name: Install GitVersion
            uses: gittools/actions/gitversion/setup@v0.9.13
            with:
                versionSpec: '5.x'

        -   id: git-tool
            name: GitTools
            uses: gittools/actions/gitversion/execute@v0.9.13

        -   name: Get build number based on data
            id: date
            run: echo "::set-output name=BuildMetaData::$(date +'%Y%m%d%H%M')"

        -   name: Get short PreReleaseTag
            id: prereleasetag
            run: |
                pre_release_tag=${{ steps.git-tool.outputs.PreReleaseTag }}
                echo "::set-output name=PreReleaseTag::${pre_release_tag:0:9}"

    cura-installer-create:
        runs-on: ${{ matrix.os }}

        needs: [ get-semver ]

        strategy:
            fail-fast: false
            matrix:
                os: [ macos-10.15, windows-2022, ubuntu-20.04 ]

        env:
            CURA_VERSION: ${{ needs.get-semver.outputs.semver_full }}

        steps:
        -   name: Checkout cura-build-environment
            uses: actions/checkout@v3

        -   name: Setup Python and pip
            uses: actions/setup-python@v3
            with:
                python-version: '3.10.4'
                architecture: 'x64'
                cache: 'pip'
                cache-dependency-path: requirements-runner.txt

        -   name: Prepare Python environment runner
            run: pip install -r requirements-runner.txt

        -   name: Cache Conan local repository packages (Bash)
            uses: actions/cache@v3
            if: ${{ runner.os != 'Windows' }}
            with:
                path: |
                    $HOME/.conan/data
                key: ${{ runner.os }}-conan

        -   name: Cache Conan local repository packages (Powershell)
            uses: actions/cache@v3
            if: ${{ runner.os == 'Windows' }}
            with:
                path: |
                    C:\Users\runneradmin\.conan\data
                    C:\.conan
                key: ${{ runner.os }}-conan

            # TODO: check minimum number of packages required
        -   name: Prepare System packages (Linux)
            if: ${{ runner.os == 'Linux' }}
            run: sudo apt-get install -y libxml2-dev libxmlsec1-dev libgl1-mesa-dev libx11-dev libx11-xcb-dev libfontenc-dev libice-dev libsm-dev libxau-dev libxaw7-dev libxcomposite-dev libxcursor-dev libxdamage-dev libxdmcp-dev libxext-dev libxfixes-dev libxft-dev libxi-dev libxinerama-dev libxkbfile-dev libxmu-dev libxmuu-dev libxpm-dev libxrandr-dev libxrender-dev libxres-dev libxss-dev libxt-dev libxtst-dev libxv-dev libxvmc-dev libxxf86vm-dev xtrans-dev libxcb-render0-dev libxcb-render-util0-dev libxcb-xkb-dev libxcb-icccm4-dev libxcb-image0-dev libxcb-keysyms1-dev libxcb-randr0-dev libxcb-shape0-dev libxcb-sync-dev libxcb-xfixes0-dev libxcb-xinerama0-dev xkb-data libxcb-dri3-dev uuid-dev libxcb-util-dev ninja-build patchelf desktop-file-utils libgdk-pixbuf2.0-dev fakeroot strace fuse libwayland-cursor0 libwayland-client0 libwayland-egl1

        -   name: Prepare Conan
            run: |
                conan config install https://github.com/Ultimaker/conan-config.git -a "-b ${{ github.event.inputs.conan_config }}"
                conan profile new default --detect

        -   name: Set the JFrog Artifactory user (bash)
            if: ${{ runner.os != 'Windows' }}
            run: conan user -p $CONAN_PASS -r ultimaker $CONAN_USER

        -   name: Set the JFrog Artifactory user (Powershell)
            if: ${{ runner.os == 'Windows' }}
            run: conan user -p $Env:CONAN_PASS -r ultimaker $Env:CONAN_USER

        -   name: Prepare cura-build-environment
            run: |
                conan install . -pr:b cura_build.jinja -pr:h cura_release.jinja --build=missing --update -g GitHubActionsBuildEnv -g GitHubActionsRunEnv
                conan source .

        -   name: Prepare Cura
            run: conan install . -pr:b cura_build.jinja -pr:h cura_release.jinja -o cura:devtools=True -o cura:staging=${{ github.event.inputs.staging }} -o cura:enterprise=${{ github.event.inputs.enterprise }} --build=missing --update -g GitHubActionsBuildEnv -g GitHubActionsRunEnv
            working-directory: cmake-build-release/cura

        -   name: Upload the Package(s)
            run: conan upload "*" -r ultimaker --all -c

        -   name: Set Environment variables for Cura (bash)
            if: ${{ runner.os != 'Windows' }}
            run: |
                . activate_github_actions_buildenv.sh
                . activate_github_actions_runenv.sh
            working-directory: cmake-build-release/cura/venv/conan

        -   name: Set Environment variables for Cura (Powershell)
            if: ${{ runner.os == 'Windows' }}
            run: |
                .\activate_github_actions_buildenv.ps1
                .\activate_github_actions_runenv.ps1
            working-directory: cmake-build-release/cura/venv/conan

        -   name: Install Cura Python requirements
            run: |
                pip install -r requirements.txt
                pip install -r requirements-dev.txt
            working-directory: cmake-build-release/cura

        -   name: Create the Cura dist
            run: pyinstaller Ultimaker-Cura.spec
            working-directory: cmake-build-release/cura

        -   name: Archive the artifacts (bash)
            if: ${{ github.event.inputs.installer == 'false' && runner.os != 'Windows' }}
            run: tar -zcf "./Ultimaker-Cura-${{ needs.get-semver.outputs.semver_full }}-${{ runner.os }}-${{ runner.arch }}.tar.gz" "./Ultimaker-Cura/"
            working-directory: cmake-build-release/cura/dist

        -   name: Archive the artifacts (Powershell)
            if: ${{ github.event.inputs.installer == 'false' && runner.os == 'Windows' }}
            run: Compress-Archive -Path ".\Ultimaker-Cura" -DestinationPath ".\Ultimaker-Cura-${{ needs.get-semver.outputs.semver_full }}-${{ runner.os }}-${{ runner.arch }}.zip"
            working-directory: cmake-build-release/cura/dist

        -   name: Create the Windows exe installer (Powershell)
            if: ${{ github.event.inputs.installer == 'true' && runner.os == 'Windows' }}
            run: |
                python "$Env:GITHUB_WORKSPACE\packaging\NSIS\nsis-configurator.py" um_path "$Env:GITHUB_WORKSPACE\packaging\NSIS\Ultimaker-Cura.nsi.jinja" "Ultimaker Cura" "Ultimaker-Cura.exe" "${{ needs.get-semver.outputs.semver_major }}" "${{ needs.get-semver.outputs.semver_minor }}" "${{ needs.get-semver.outputs.semver_patch }}" "0" "Ultimaker B.V." "https://ultimaker.com" "$Env:GITHUB_WORKSPACE\packaging\cura_license.txt" "LZMA" "$Env:GITHUB_WORKSPACE\packaging\cura_banner_nsis.bmp" "$Env:GITHUB_WORKSPACE\packaging\Cura.ico" "Ultimaker-Cura-${{ needs.get-semver.outputs.semver_full }}-${{ runner.os }}-${{ runner.arch }}.exe"
                makensis /V2 /P4 Ultimaker-Cura.nsi
            working-directory: cmake-build-release/cura/dist

        -   name: Upload the artifacts
            uses: actions/upload-artifact@v3
            with:
                name: Ultimaker-Cura-${{ needs.get-semver.outputs.semver_full }}-${{ runner.os }}-${{ runner.arch }}
                path: |
                    cmake-build-release/cura/dist/*.tar.gz
                    cmake-build-release/cura/dist/*.zip
                    cmake-build-release/cura/dist/*.exe
                    cmake-build-release/cura/dist/*.msi
                    cmake-build-release/cura/dist/*.dmg
                    cmake-build-release/cura/dist/*.AppImage
                retention-days: 2
