project(cura-build-environment)

cmake_minimum_required(VERSION 2.8.12)

# This should care that our CMAKE_INSTALL_PREFIX is absolute at the end...
get_filename_component(CMAKE_INSTALL_PREFIX
                       ${CMAKE_INSTALL_PREFIX}
                       ABSOLUTE
                       CACHE FORCE)

list(APPEND CMAKE_MODULE_PATH ${CMAKE_SOURCE_DIR}/cmake)

include(ExternalProject)
include(GNUInstallDirs)

include(BuildPlatformDetection)
include(SetProjectDependencies)

option(INCLUDE_DEVEL "Include development tools" OFF)

# OS-specific changes
if(BUILD_OS_WINDOWS)
    # Minimalistic preinstalled Python on Windows:
    set(PYTHON_EXECUTABLE ${CMAKE_INSTALL_PREFIX}/bin/python.exe)
else()
    # All other OSs like OSX
    set(PYTHON_EXECUTABLE ${CMAKE_INSTALL_PREFIX}/bin/python3)
endif()

if(BUILD_OS_WIN64)
    set(CMAKE_MINGWC_COMPILER_ARG1 "-m64")
    set(CMAKE_MINGW_CXX_COMPILER_ARG1 "-m64")
else(BUILD_OS_WIN64)
    if(BUILD_OS_WIN32)
        set(CMAKE_MINGWC_COMPILER_ARG1 "-m32")
        set(CMAKE_MINGW_CXX_COMPILER_ARG1 "-m32")
    endif(BUILD_OS_WIN32)
endif(BUILD_OS_WIN64)

# Build projects step
add_custom_target(projects ALL COMMENT "Building Projects...")

file(GLOB _projects projects/*.cmake)
foreach(_project ${_projects})
    include(${_project})
endforeach()

if(INCLUDE_DEVEL)
    file(GLOB _devel_projects devel/*.cmake)
    foreach(_devel_project ${_devel_projects})
        include(${_devel_project})
    endforeach()
endif()

ProcessProjectDependencies(TARGET projects)
